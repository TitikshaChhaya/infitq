//validating BST
boolean isBST(Node node)
{
    if (node == null)
        return true;
        
    if (node.left != null && node.left.data > node.data)
        return false;
        
    if (node.right != null && node.right.data < node.data)
        return false;
        
    if (!isBST(node.left) || !isBST(node.right))
        return false;
     
    return true;
}


// DFS
class Node {
    int key;
    Node left, right;
 
    public Node(int item)
    {
        key = item;
        left = right = null;
    }
}
 
class BinaryTree {
    Node root;
 
    BinaryTree()
    {
        root = null;
    }
    void printInorder(Node node)
    {
        if (node == null)
            return;
 
        printInorder(node.left);
 
        System.out.print(node.key + " ");

        printInorder(node.right);
    }
    
    void printInorder() 
    { 
      printInorder(root); 
    }

    public static void main(String[] args)
    {
        BinaryTree tree = new BinaryTree();
        tree.root = new Node(1);
        tree.root.left = new Node(2);
        tree.root.right = new Node(3);
        tree.root.left.left = new Node(4);
        tree.root.left.right = new Node(5);
 
        System.out.println("\nInorder traversal of binary tree is ");
        tree.printInorder();
    }
    
    
    //BFS
    void printLevelOrder()
    {
        int h = height(root);
        int i;
        for (i = 1; i <= h; i++)
            printCurrentLevel(root, i);
    }
    int height(Node root)
    {
        if (root == null)
            return 0;
        else 
        {
            int lheight = height(root.left);
            int rheight = height(root.right);
 
            if (lheight > rheight)
                return (lheight + 1);
            else
                return (rheight + 1);
        }
    }
    void printCurrentLevel(Node root, int level)
    {
        if (root == null)
            return;
        if (level == 1)
            System.out.print(root.data + " ");
        else if (level > 1) 
        {
            printCurrentLevel(root.left, level - 1);
            printCurrentLevel(root.right, level - 1);
        }
    }
